Build Your First Blockchain App - Ethereum Todo List 2019
-----------------------------------------------
 			
Blockchain: highly secure and reliable network that 
 records data in a distributed ledger that is not controlled by 
 a central authority. 

https://docs.soliditylang.org/en/develop/
https://www.tutorialspoint.com/solidity/solidity_basic_syntax.htm
https://remix.ethereum.org/


https://www.youtube.com/watch?v=rzvk2kdjr2I&list=PLS5SEs8ZftgUNcUVXtn2KXiE1Ui9B5UrY&index=40
https://github.com/dappuniversity/eth-todo-list
https://www.dappuniversity.com/articles/blockchain-app-tutorial

43:00
Table of Contents:
0. Install Dependencies [6:34]
1. Project Setup [9:26]  
2. List Tasks [22:47]  
3. Create Tasks [1:05:07] 
4. Complete Tasks [1:16:40] 




                      Programs 
=============================
1.  Add ganache   https://trufflesuite.com/ganache/ Download an install
2.  Add truffle   npm install -g truffle@5.0.2
 (https://trufflesuite.com/truffle/)
         Truffle is the most popular development framework for Ethereum  
3. Metamask Ethereum Wallet : Alow goggle chrom connection to blockchain networks.

Project  setup
--------------
1. Create dir '/eth-todo-list'
2. truffle version 
	  truffle version
      Truffle v5.0.2 (core: 5.0.2)
      Solidity v0.5.0 (solc-js)
      Node v16.14.2

3. In directory  '/eth-todo-list' initialize a new truffle project:
       truffle init

4. Download  package.json from github
    
5. Install the dependencies from the command line like this:
                npm install
6. create new file '......\eth-todo-list\contracts\TodoList.sol 
   and write :
            pragma solidity ^0.5.0;
                contract TodoList {
                   uint public taskCount = 0;
            }
			

 --------------------------




 Cpmpile
------------------------------------
 1. truffle  compile
  this will  compile to the file"\eth-todo-list\build\contracts\todo.jason"

 2.Open the file 'truffle-config.js' erase all the content and put
   the content of 'truffle-config.js'  from the  github.

 3. Run Gananche

4. Create a migration file:   
   create a new file  "2_deploy_contracts.js"  in /migration
   Put the next text:

     var TodoList = artifacts.require("./TodoList.sol");

          module.exports = function(deployer) {
             deployer.deploy(TodoList);
      };
 5. Run   migration script from the command line like this:
      truffle migrate 
 
 

19:30
 
 
 6. open the truffle console from the command line like this:
       truffle console     
 7. todoList = await TodoList.deployed()
   ("TodoList" = name of the variable that we created in the migration file)
 8. Write ' TodoList' and you'll get the content of the var  
    todoList.address: get the address of the smart contract in the block chain    
    to get the taskCount run the next two commands:
        a.  taskCount = await todoList.taskCount()
        b.  taskCount.toNumber() 
        output:
           BN { negative: 0, words: [ 1, <1 empty item> ], length: 1, red: null }
           truffle(development)>
            output: BN:0


# List Tasks 22:46 33:30
Steps for  listing out the tasks in the todo list. 
---------------------------------------------------------
  1.  Write code to list tasks in the smart contract
  2.  List tasks from the smart contract inside the Truffle console
  3.  List tasks in the client side application
  4.  Write a test for listing tasks

In order to list the tasks inside the smart contract, we'll need a way 
to model a task in solidity.
 Solidity allows you to define your own data types with structs. 
 We can model any arbitrary data with this powerful feature.
  We'll use a struct to model the task for our todo list like this:           

  Rerun  the smart contract
  ==============
  1. truffle  compile
  2. run gananche
  3. truffle migrate --reset   //Deploy a new copy of the smart contract to 
     the blockchain
  4. truffle console
  5. Inside the console, let's get a deployed copy of the new smart contract.
         todoList = await TodoList.deployed()
  6. todoList.address  // Get the address 
  7. task = await todoList.tasks(1) #get the task number 1, from the todo list.    
  8.  To print the content print 'task'
      to print value of 'task[1]' , print 'task.content ' 
     'Check out dappuniversity.com',
      
     
   9.  task.id// Print id  
       task.id.toNumber()
   
   35:00 38:00
   10. Client side code to interact with the todo list smart contract:
        
       a. Create the following file  in  './'
            ./bs-config.json  //bs Browser sink
       b. Create the   '/src' dir:     
       c. Create the following files in '/src' dir:
       d. Copy the content  '/src' dir from git hub
   11. From a new tab go to the project directory and start the server:
        npm run dev          
https://www.youtube.com/watch?v=rzvk2kdjr2I&list=PLS5SEs8ZftgUNcUVXtn2KXiE1Ui9B5UrY&index=40
44:00
can't connect the metamsk to the 'ganosh' or any other account 